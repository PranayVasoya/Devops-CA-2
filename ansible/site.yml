- name: Configure Server and Deploy Chatbot Backend
  # This tells Ansible to run on all servers listed in the [servers] group of your inventory.
  hosts: servers
  # This allows Ansible to run commands with 'sudo' for administrative tasks.
  become: yes
  tasks:
    - name: Update apt package cache (for Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
      # This 'when' condition ensures the task only runs on Debian-based systems.
      when: ansible_os_family == "Debian"

    - name: Install required system packages for Docker
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker Engine
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install Docker SDK for Python
      ansible.builtin.pip:
        name: docker

    - name: Pull the latest chatbot backend image from Docker Hub
      community.docker.docker_image:
        name: "{{ dockerhub_username }}/synkro-chatbot-backend:latest"
        source: pull
      # The '{{ dockerhub_username }}' is the variable from your group_vars/all.yml file.

    - name: Stop and remove any existing chatbot container
      community.docker.docker_container:
        name: chatbot-backend
        state: absent
      # 'ignore_errors' prevents the playbook from failing if the container doesn't exist on the first run.
      ignore_errors: true

    - name: Run the new chatbot backend container
      community.docker.docker_container:
        name: chatbot-backend
        image: "{{ dockerhub_username }}/synkro-chatbot-backend:latest"
        state: started
        restart_policy: always
        published_ports:
          # This maps port 8000 inside the container to port 8000 on the server.
          - "8000:8000"